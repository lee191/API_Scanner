# 실제 구현된 엔드포인트 목록 (localhost:5000)
# Generated: 2025-10-16
# Source: test-app/app.py

================================================================================
PUBLIC APIs (문서화된 API)
================================================================================

# 기본 페이지
GET     /

# 사용자 관련 API
GET     /api/v1/users                  # 모든 사용자 목록 조회
GET     /api/v1/user/<user_id>         # 특정 사용자 정보 조회 (예: /api/v1/user/1)
POST    /api/v1/user/delete            # 사용자 삭제

# 제품 관련 API
GET     /api/v1/products               # 모든 제품 목록 조회

# 검색 API
GET     /api/v1/search?q=<query>       # 검색 (예: /api/v1/search?q=test)

# 인증 API
POST    /api/v1/auth/login             # 로그인 (query params: username, password)
POST    /api/v1/auth/register          # 회원가입
POST    /api/v1/auth/reset-password    # 비밀번호 리셋

# 보안 데이터 API
GET     /api/v1/secure/data            # 보안 데이터 조회 (Authorization 헤더 필요)

# 파일 업로드 API
POST    /api/v1/upload                 # 파일 업로드

# 게시글 API (JavaScript에서 사용)
GET     /api/v1/posts                  # 모든 게시글 조회
GET     /api/v1/posts/<post_id>        # 특정 게시글 조회 (예: /api/v1/posts/1)
POST    /api/v1/posts                  # 게시글 작성
GET     /api/v1/posts/<post_id>/comments  # 게시글의 댓글 조회

# 댓글 API (JavaScript에서 사용)
POST    /api/v1/comments               # 댓글 작성

# 결제 API (JavaScript에서 사용)
GET     /api/v1/payments               # 모든 결제 내역 조회
POST    /api/v1/payments               # 결제 생성

================================================================================
SHADOW APIs (문서화되지 않은 내부 API - 스캐너가 발견해야 함)
================================================================================

# 관리자 API
GET     /api/internal/admin/users      # 모든 사용자 정보 (비밀번호, API 키 포함)
POST    /api/internal/admin/delete     # 사용자 삭제 (관리자 전용)
PUT     /api/internal/admin/config     # 시스템 설정 변경 (관리자 전용)

# 디버그 API
GET     /api/internal/debug/config     # 디버그 설정 및 시크릿 키 노출

# 통계 API
GET     /api/internal/stats            # 내부 시스템 통계

# 실행 API
POST    /api/internal/execute          # 명령어 실행 (매우 위험!)

================================================================================
HIDDEN PAGES (브루트포싱으로 발견 가능한 페이지)
================================================================================

GET     /admin                         # 관리자 패널
GET     /internal                      # 내부 대시보드
GET     /debug                         # 디버그 콘솔
GET     /backup                        # 백업 관리
GET     /api                           # API 문서

================================================================================
JavaScript 파일에서 발견 가능한 엔드포인트
================================================================================

# 메인 페이지 (/)의 JavaScript에서:
GET     /api/v1/products               # fetch로 호출

# 관리자 페이지 (/admin)의 JavaScript에서:
GET     /api/internal/admin/users      # fetch로 호출
        /static/admin.js               # 추가 API 호출 가능
        /static/admin-dashboard.js     # 추가 API 호출 가능

# 내부 페이지 (/internal)의 JavaScript에서:
GET     /api/internal/stats            # fetch로 호출
        /static/internal-api.js        # 추가 API 호출 가능
        /static/internal-utils.js      # 추가 API 호출 가능

# 디버그 페이지 (/debug)의 JavaScript에서:
GET     /api/internal/debug/config     # fetch로 호출
        /static/debug-console.js       # 추가 API 호출 가능
        /static/debug-logger.js        # 추가 API 호출 가능

# API 문서 페이지 (/api)의 JavaScript에서:
        /static/api-client.js          # 추가 API 호출 가능
        /static/api-explorer.js        # 추가 API 호출 가능

# 백업 페이지 (/backup)의 JavaScript에서:
        /static/backup-manager.js      # 추가 API 호출 가능

================================================================================
테스트 예시 (curl 명령어)
================================================================================

# Public APIs
curl -X GET "http://localhost:5000/api/v1/users"
curl -X GET "http://localhost:5000/api/v1/user/1"
curl -X GET "http://localhost:5000/api/v1/products"
curl -X GET "http://localhost:5000/api/v1/search?q=test"
curl -X POST "http://localhost:5000/api/v1/auth/login?username=admin&password=admin123"
curl -X POST "http://localhost:5000/api/v1/auth/register" -H "Content-Type: application/json" -d '{"username":"test","password":"test123","email":"test@example.com"}'
curl -X GET "http://localhost:5000/api/v1/secure/data" -H "Authorization: Bearer token123"
curl -X POST "http://localhost:5000/api/v1/user/delete" -H "Content-Type: application/json" -d '{"user_id": "1"}'

# JavaScript에서 사용하는 Public APIs
curl -X GET "http://localhost:5000/api/v1/posts"
curl -X GET "http://localhost:5000/api/v1/posts/1"
curl -X POST "http://localhost:5000/api/v1/posts" -H "Content-Type: application/json" -d '{"title":"Test","content":"Content","author_id":1}'
curl -X GET "http://localhost:5000/api/v1/posts/1/comments"
curl -X POST "http://localhost:5000/api/v1/comments" -H "Content-Type: application/json" -d '{"post_id":1,"content":"Comment","author_id":1}'
curl -X GET "http://localhost:5000/api/v1/users/1"
curl -X PUT "http://localhost:5000/api/v1/users/1" -H "Content-Type: application/json" -d '{"name":"Updated"}'
curl -X DELETE "http://localhost:5000/api/v1/users/1"
curl -X GET "http://localhost:5000/api/v1/payments"
curl -X POST "http://localhost:5000/api/v1/payments" -H "Content-Type: application/json" -d '{"user_id":1,"card_number":"1234","cvv":"123","amount":100}'

# Shadow APIs (스캐너가 발견해야 함)
curl -X GET "http://localhost:5000/api/internal/admin/users"
curl -X POST "http://localhost:5000/api/internal/admin/delete" -H "Content-Type: application/json" -d '{"user_id":1}'
curl -X PUT "http://localhost:5000/api/internal/admin/config" -H "Content-Type: application/json" -d '{"debug":true}'
curl -X GET "http://localhost:5000/api/internal/debug/config"
curl -X GET "http://localhost:5000/api/internal/stats"
curl -X POST "http://localhost:5000/api/internal/execute" -H "Content-Type: application/json" -d '{"command": "ls"}'

# Hidden Pages
curl -X GET "http://localhost:5000/admin"
curl -X GET "http://localhost:5000/internal"
curl -X GET "http://localhost:5000/debug"
curl -X GET "http://localhost:5000/backup"
curl -X GET "http://localhost:5000/api"

================================================================================
예상 취약점
================================================================================

1. SQL Injection: /api/v1/user/<user_id>
2. XSS: /api/v1/search?q=<query>
3. 인증 없는 API: /api/v1/users, /api/internal/admin/users
4. 민감 정보 노출: /api/v1/user/<user_id>, /api/internal/debug/config
5. CORS 설정 문제: 모든 엔드포인트
6. Rate Limiting 없음: 모든 엔드포인트
7. CSRF 보호 없음: POST 엔드포인트들
8. 약한 인증: /api/v1/secure/data
9. 비밀번호 URL 노출: /api/v1/auth/login
10. 명령어 실행: /api/internal/execute

================================================================================
스캐너 검증 체크리스트
================================================================================

JavaScript 분석 (Public APIs):
[ ] /api/v1/products 발견
[ ] /api/v1/posts 발견
[ ] /api/v1/posts/:postId 발견
[ ] /api/v1/posts/:postId/comments 발견
[ ] /api/v1/comments 발견
[ ] /api/v1/users 발견
[ ] /api/v1/users/:userId 발견 (GET, PUT, DELETE)
[ ] /api/v1/payments 발견
[ ] /api/v1/auth/login 발견
[ ] /api/v1/auth/register 발견
[ ] /api/v1/auth/reset-password 발견

JavaScript 분석 (Shadow APIs):
[ ] /api/internal/admin/users 발견
[ ] /api/internal/admin/delete 발견
[ ] /api/internal/admin/config 발견
[ ] /api/internal/stats 발견
[ ] /api/internal/debug/config 발견

브루트포싱:
[ ] /admin 페이지 발견
[ ] /internal 페이지 발견
[ ] /debug 페이지 발견
[ ] /backup 페이지 발견
[ ] /api 문서 발견

취약점 탐지:
[ ] SQL Injection 탐지 (/api/v1/user/<user_id>)
[ ] XSS 탐지 (/api/v1/search)
[ ] 민감 정보 노출 탐지 (비밀번호, API 키)
[ ] 인증 문제 탐지 (인증 없는 API)
[ ] IDOR 탐지 (다른 사용자 정보 접근)
[ ] Mass Assignment 탐지 (권한 상승)

================================================================================
총 엔드포인트 수
================================================================================

Public APIs (HTML에서 직접 구현): 8개
Public APIs (JavaScript에서만 사용): 11개
Shadow APIs: 6개
Hidden Pages: 5개
총: 30개의 고유 엔드포인트

================================================================================
JavaScript 파일별 엔드포인트 매핑
================================================================================

shop.js:
  - GET  /api/v1/posts
  - GET  /api/v1/posts/:postId
  - POST /api/v1/posts
  - GET  /api/v1/posts/:postId/comments
  - POST /api/v1/comments
  - GET  /api/v1/users
  - GET  /api/v1/users/:userId
  - PUT  /api/v1/users/:userId
  - DELETE /api/v1/users/:userId
  - GET  /api/v1/payments
  - POST /api/v1/payments

auth.js:
  - POST /api/v1/auth/login
  - POST /api/v1/auth/register
  - POST /api/v1/auth/reset-password

admin.js:
  - GET  /api/internal/admin/users
  - POST /api/internal/admin/delete
  - PUT  /api/internal/admin/config
