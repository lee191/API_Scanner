### Shadow API Scanner - HTTP Request File
### VS Code REST Client 또는 IntelliJ HTTP Client에서 사용 가능
### 사용 방법: 각 요청 앞의 "Send Request" 버튼 클릭 또는 Ctrl+Alt+R

### ============================================================
### 변수 설정
### ============================================================
@baseUrl = http://localhost:5001
@projectId = {{project_id}}
@scanId = {{scan_id}}

### ============================================================
### 프로젝트 관리
### ============================================================

### 프로젝트 목록 조회
GET {{baseUrl}}/api/projects

###

### 프로젝트 생성
POST {{baseUrl}}/api/projects
Content-Type: application/json

{
  "name": "테스트 프로젝트",
  "description": "HTTP Request로 생성한 프로젝트"
}

###

### 프로젝트 상세 조회
# @name getProject
GET {{baseUrl}}/api/projects/{{projectId}}

###

### 프로젝트 수정
PUT {{baseUrl}}/api/projects/{{projectId}}
Content-Type: application/json

{
  "name": "수정된 프로젝트",
  "description": "업데이트된 설명"
}

###

### 프로젝트 삭제
DELETE {{baseUrl}}/api/projects/{{projectId}}

###

### ============================================================
### 스캔 관리
### ============================================================

### 스캔 시작 (전체 분석)
# @name startScan
POST {{baseUrl}}/api/scan
Content-Type: application/json

{
  "project_id": "{{projectId}}",
  "target_url": "http://localhost:5000",
  "analysis_type": "both",
  "ai_enabled": true,
  "bruteforce_enabled": true,
  "validate": true
}

###

### 스캔 시작 (정적 분석만)
POST {{baseUrl}}/api/scan
Content-Type: application/json

{
  "project_id": "{{projectId}}",
  "target_url": "http://localhost:5000",
  "analysis_type": "static",
  "ai_enabled": false,
  "bruteforce_enabled": false,
  "validate": true
}

###

### 스캔 시작 (동적 분석만)
POST {{baseUrl}}/api/scan
Content-Type: application/json

{
  "project_id": "{{projectId}}",
  "target_url": "http://localhost:5000",
  "analysis_type": "dynamic",
  "ai_enabled": false,
  "bruteforce_enabled": false,
  "validate": true
}

###

### 스캔 상태 조회
# @name getScanStatus
GET {{baseUrl}}/api/status/{{scanId}}

###

### 스캔 정지
POST {{baseUrl}}/api/scan/{{scanId}}/stop

###

### 스캔 삭제
DELETE {{baseUrl}}/api/scan/{{scanId}}

###

### ============================================================
### 스캔 결과 조회
### ============================================================

### 스캔 상세 정보
GET {{baseUrl}}/api/scan/{{scanId}}

###

### 엔드포인트 목록
GET {{baseUrl}}/api/scan/{{scanId}}/endpoints

###

### 엔드포인트 목록 (필터링: GET 메서드만)
GET {{baseUrl}}/api/scan/{{scanId}}/endpoints?method=GET

###

### 엔드포인트 목록 (필터링: 200 응답만)
GET {{baseUrl}}/api/scan/{{scanId}}/endpoints?status_code=200

###

### 취약점 목록
GET {{baseUrl}}/api/scan/{{scanId}}/vulnerabilities

###

### 취약점 목록 (심각도별)
GET {{baseUrl}}/api/scan/{{scanId}}/vulnerabilities?severity=high

###

### 발견된 경로 목록
GET {{baseUrl}}/api/scan/{{scanId}}/discovered-paths

###

### ============================================================
### AI 챗 (v4.0 - HTTP 트래픽 분석)
### ============================================================

### AI 챗 - 간단한 질문
POST {{baseUrl}}/api/chat
Content-Type: application/json

{
  "message": "스캔 결과를 요약해줘",
  "scan_context": {
    "target_url": "http://localhost:5000",
    "total_endpoints": 50,
    "statistics": {
      "count_2xx": 30,
      "count_4xx": 15,
      "count_5xx": 5
    }
  },
  "conversation_history": []
}

###

### AI 챗 - 보안 취약점 분석
POST {{baseUrl}}/api/chat
Content-Type: application/json

{
  "message": "보안 취약점이 있는지 분석해줘",
  "scan_context": {
    "target_url": "http://localhost:5000",
    "total_endpoints": 50,
    "endpoint_samples": {
      "by_status": {
        "client_error_4xx": [
          {
            "url": "/admin/dashboard",
            "method": "GET",
            "status_code": 401
          },
          {
            "url": "/api/secret",
            "method": "POST",
            "status_code": 403
          }
        ]
      },
      "sensitive_endpoints": [
        {
          "url": "/admin/users",
          "method": "GET",
          "status_code": 401
        }
      ]
    }
  },
  "conversation_history": []
}

###

### AI 챗 - HTTP 트래픽 상세 분석 (v4.0)
POST {{baseUrl}}/api/chat
Content-Type: application/json

{
  "message": "이 엔드포인트의 HTTP 트래픽을 분석해줘",
  "scan_context": {
    "target_url": "http://localhost:5000",
    "endpoint_samples": {
      "http_traffic": [
        {
          "url": "/api/users",
          "method": "POST",
          "status_code": 201,
          "request_headers": {
            "Content-Type": "application/json",
            "Authorization": "Bearer token123"
          },
          "request_body": "{"username":"test","password":"pass123"}",
          "response_headers": {
            "Content-Type": "application/json",
            "Set-Cookie": "session=abc123"
          },
          "response_body": "{"id":1,"username":"test","created":true}",
          "response_time": 245
        }
      ]
    }
  },
  "conversation_history": []
}

###

### AI 챗 - 대화 이어가기
POST {{baseUrl}}/api/chat
Content-Type: application/json

{
  "message": "좀 더 자세히 설명해줘",
  "scan_context": {
    "target_url": "http://localhost:5000",
    "total_endpoints": 50
  },
  "conversation_history": [
    {
      "role": "user",
      "content": "스캔 결과를 요약해줘"
    },
    {
      "role": "assistant",
      "content": "스캔 결과 50개의 엔드포인트가 발견되었습니다..."
    }
  ]
}

###

### ============================================================
### 통계 및 히스토리
### ============================================================

### 스캔 히스토리 (최근 10개)
GET {{baseUrl}}/api/history?limit=10

###

### 스캔 히스토리 (최근 50개)
GET {{baseUrl}}/api/history?limit=50

###

### 프로젝트 통계
GET {{baseUrl}}/api/projects/{{projectId}}/statistics

###

### ============================================================
### 헬스체크
### ============================================================

### 서버 상태 확인
GET {{baseUrl}}/health

###

### API 버전 확인
GET {{baseUrl}}/api/version

###
