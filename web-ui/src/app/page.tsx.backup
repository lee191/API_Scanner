'use client';

import { useState } from 'react';
import { Shield, Search, FileCode, AlertTriangle, CheckCircle, ChevronDown, ChevronRight, Copy, Terminal } from 'lucide-react';
import axios from 'axios';

export default function Home() {
  const [targetUrl, setTargetUrl] = useState('');
  const [jsPath, setJsPath] = useState('');
  const [scanVulns, setScanVulns] = useState(true);
  const [aiEnabled, setAiEnabled] = useState(true);
  const [analysisType, setAnalysisType] = useState<'js_only' | 'full_scan'>('full_scan');
  const [scanning, setScanning] = useState(false);
  const [scanId, setScanId] = useState<string | null>(null);
  const [result, setResult] = useState<any>(null);
  const [error, setError] = useState<string | null>(null);
  const [progress, setProgress] = useState(0);
  const [statusMessage, setStatusMessage] = useState('');
  const [expandedEndpoints, setExpandedEndpoints] = useState<Set<number>>(new Set());

  const toggleEndpoint = (index: number) => {
    const newExpanded = new Set(expandedEndpoints);
    if (newExpanded.has(index)) {
      newExpanded.delete(index);
    } else {
      newExpanded.add(index);
    }
    setExpandedEndpoints(newExpanded);
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const generateCurlCommand = (endpoint: any, baseUrl: string) => {
    // Replace template variables with example values
    let cleanUrl = endpoint.url;

    // Replace common template patterns in path only (not in protocol like http:)
    // Only replace :variable patterns that appear after a /
    cleanUrl = cleanUrl.replace(/\/:id\b/g, '/123')
                       .replace(/\/:param\b/g, '/value')
                       .replace(/\/:userId\b/g, '/123')
                       .replace(/\/:productId\b/g, '/456')
                       .replace(/\/:name\b/g, '/example')
                       .replace(/\/:[a-zA-Z_]\w*/g, '/value'); // catch-all for /: patterns only

    // Construct full URL
    const url = cleanUrl.startsWith('http') ? cleanUrl : `${baseUrl}${cleanUrl}`;
    let curl = `curl -X ${endpoint.method} "${url}"`;

    if (endpoint.method !== 'GET' && endpoint.method !== 'DELETE') {
      curl += ` \\\n  -H "Content-Type: application/json"`;
      curl += ` \\\n  -d '{"key": "value"}'`;
    }

    return curl;
  };

  const startScan = async () => {
    if (!targetUrl) {
      setError('대상 URL을 입력해주세요');
      return;
    }

    setScanning(true);
    setError(null);
    setResult(null);
    setExpandedEndpoints(new Set());

    try {
      console.log('Starting scan with:', { targetUrl, jsPath, scanVulns, analysisType });

      // Start scan
      const response = await axios.post('/api/scan', {
        target_url: targetUrl,
        js_path: jsPath || undefined,
        scan_vulns: scanVulns,
        ai_enabled: aiEnabled,
        analysis_type: analysisType
      });

      console.log('Scan started:', response.data);

      const { scan_id } = response.data;
      setScanId(scan_id);

      // Poll for results
      pollScanStatus(scan_id);
    } catch (err: any) {
      console.error('Start scan error:', err);
      const errorMsg = err.response?.data?.error
        || err.response?.data?.details
        || err.message
        || 'Failed to start scan';
      setError(`스캔 시작 실패: ${errorMsg}`);
      setScanning(false);
    }
  };

  const pollScanStatus = async (id: string) => {
    let attempts = 0;
    const maxAttempts = 150; // 5 minutes max (150 * 2 seconds)

    const interval = setInterval(async () => {
      attempts++;

      // Timeout after max attempts
      if (attempts >= maxAttempts) {
        clearInterval(interval);
        setError('Scan timeout: 스캔이 너무 오래 걸립니다. 서버 로그를 확인하세요.');
        setScanning(false);
        return;
      }

      try {
        const response = await axios.get(`/api/status/${id}`);
        const status = response.data;

        console.log(`Scan ${id} status:`, status);

        // Update progress
        setProgress(status.progress || 0);
        setStatusMessage(status.message || '');

        if (status.status === 'completed') {
          clearInterval(interval);
          setResult(status.result);
          setScanning(false);
          setProgress(100);
          setStatusMessage('스캔 완료!');
        } else if (status.status === 'failed') {
          clearInterval(interval);
          setError(status.message || 'Scan failed');
          setScanning(false);
          setProgress(0);
        }
      } catch (err: any) {
        clearInterval(interval);
        console.error('Poll error:', err);

        const errorMsg = err.response?.data?.error
          || err.response?.data?.details
          || err.message
          || 'Failed to check scan status';

        setError(`스캔 상태 확인 실패: ${errorMsg}`);
        setScanning(false);
      }
    }, 2000); // Poll every 2 seconds
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-gray-900">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="flex items-center justify-center gap-3 mb-4">
            <Shield className="w-12 h-12 text-blue-400" />
            <h1 className="text-4xl font-bold text-white">Shadow API Scanner</h1>
          </div>
          <p className="text-gray-300 text-lg">
            숨겨진 API와 보안 취약점을 발견합니다
          </p>
        </div>

        {/* Scan Form */}
        <div className="max-w-3xl mx-auto bg-white/10 backdrop-blur-lg rounded-lg p-8 mb-8">
          <div className="space-y-6">
            {/* Target URL */}
            <div>
              <label className="block text-white mb-2 font-semibold">
                대상 URL *
              </label>
              <input
                type="text"
                value={targetUrl}
                onChange={(e) => setTargetUrl(e.target.value)}
                placeholder="http://localhost:5000"
                className="w-full px-4 py-3 rounded-lg bg-white/20 text-white placeholder-gray-400 border border-white/30 focus:outline-none focus:border-blue-400"
              />
            </div>

            {/* JavaScript Path */}
            <div>
              <label className="block text-white mb-2 font-semibold">
                JavaScript 경로 (선택사항)
              </label>
              <input
                type="text"
                value={jsPath}
                onChange={(e) => setJsPath(e.target.value)}
                placeholder="비워두면 자동으로 웹사이트에서 수집합니다"
                className="w-full px-4 py-3 rounded-lg bg-white/20 text-white placeholder-gray-400 border border-white/30 focus:outline-none focus:border-blue-400"
              />
              <p className="text-gray-400 text-sm mt-2">
                💡 JS 파일 경로를 비워두면 대상 웹사이트를 자동으로 크롤링하여 JavaScript 파일을 수집합니다.
              </p>
            </div>

            {/* Analysis Type */}
            <div>
              <label className="block text-white mb-2 font-semibold">
                분석 타입
              </label>
              <div className="flex gap-4">
                <button
                  onClick={() => setAnalysisType('js_only')}
                  className={`flex-1 py-3 px-4 rounded-lg font-semibold transition ${
                    analysisType === 'js_only'
                      ? 'bg-blue-500 text-white'
                      : 'bg-white/20 text-gray-300 hover:bg-white/30'
                  }`}
                >
                  <FileCode className="w-5 h-5 inline mr-2" />
                  JS 분석만
                </button>
                <button
                  onClick={() => setAnalysisType('full_scan')}
                  className={`flex-1 py-3 px-4 rounded-lg font-semibold transition ${
                    analysisType === 'full_scan'
                      ? 'bg-blue-500 text-white'
                      : 'bg-white/20 text-gray-300 hover:bg-white/30'
                  }`}
                >
                  <Search className="w-5 h-5 inline mr-2" />
                  전체 스캔
                </button>
              </div>
            </div>

            {/* Scan Options */}
            {analysisType === 'full_scan' && (
              <div className="space-y-3">
                <div className="flex items-center gap-3">
                  <input
                    type="checkbox"
                    id="scanVulns"
                    checked={scanVulns}
                    onChange={(e) => setScanVulns(e.target.checked)}
                    className="w-5 h-5 rounded"
                  />
                  <label htmlFor="scanVulns" className="text-white font-semibold">
                    취약점 스캔
                  </label>
                </div>
                <div className="flex items-center gap-3">
                  <input
                    type="checkbox"
                    id="aiEnabled"
                    checked={aiEnabled}
                    onChange={(e) => setAiEnabled(e.target.checked)}
                    className="w-5 h-5 rounded"
                  />
                  <label htmlFor="aiEnabled" className="text-white font-semibold flex items-center gap-2">
                    🤖 AI 분석 활성화
                    <span className="text-xs text-gray-400">(PoC 코드 자동 생성)</span>
                  </label>
                </div>
              </div>
            )}

            {/* Start Button */}
            <button
              onClick={startScan}
              disabled={scanning}
              className="w-full py-4 px-6 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 text-white font-bold rounded-lg transition text-lg"
            >
              {scanning ? (
                <>
                  <div className="inline-block w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                  스캔 중...
                </>
              ) : (
                <>
                  <Search className="w-5 h-5 inline mr-2" />
                  스캔 시작
                </>
              )}
            </button>
          </div>

          {/* Progress */}
          {scanning && (
            <div className="mt-6 p-4 bg-blue-500/20 border border-blue-500 rounded-lg">
              <div className="flex items-center justify-between mb-2">
                <span className="text-blue-200 font-semibold">진행률: {progress}%</span>
                <span className="text-blue-300 text-sm">{statusMessage}</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2.5">
                <div
                  className="bg-blue-500 h-2.5 rounded-full transition-all duration-300"
                  style={{ width: `${progress}%` }}
                ></div>
              </div>
              {scanId && (
                <div className="mt-2 text-gray-400 text-xs">
                  Scan ID: {scanId}
                </div>
              )}
            </div>
          )}

          {/* Error */}
          {error && (
            <div className="mt-6 p-4 bg-red-500/20 border border-red-500 rounded-lg text-red-200">
              <AlertTriangle className="w-5 h-5 inline mr-2" />
              {error}
            </div>
          )}
        </div>

        {/* Results */}
        {result && (
          <div className="max-w-6xl mx-auto">
            <div className="bg-white/10 backdrop-blur-lg rounded-lg p-8">
              <h2 className="text-2xl font-bold text-white mb-6 flex items-center gap-2">
                <CheckCircle className="w-7 h-7 text-green-400" />
                스캔 결과
              </h2>

              {/* Statistics */}
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
                <div className="bg-white/10 rounded-lg p-4 text-center">
                  <div className="text-3xl font-bold text-white">
                    {result.statistics?.total_endpoints || 0}
                  </div>
                  <div className="text-gray-300 text-sm">전체 엔드포인트</div>
                </div>
                <div className="bg-red-500/20 border border-red-500/50 rounded-lg p-4 text-center">
                  <div className="text-3xl font-bold text-red-400">
                    {result.statistics?.shadow_apis || 0}
                  </div>
                  <div className="text-red-200 text-sm">숨겨진 API</div>
                </div>
                <div className="bg-green-500/20 border border-green-500/50 rounded-lg p-4 text-center">
                  <div className="text-3xl font-bold text-green-400">
                    {result.statistics?.public_apis || 0}
                  </div>
                  <div className="text-green-200 text-sm">일반 API</div>
                </div>
                <div className="bg-white/10 rounded-lg p-4 text-center">
                  <div className="text-3xl font-bold text-white">
                    {result.statistics?.total_vulnerabilities || 0}
                  </div>
                  <div className="text-gray-300 text-sm">취약점</div>
                </div>
              </div>


              {/* Shadow APIs */}
              {result.shadow_apis && result.shadow_apis.length > 0 && (
                <div className="mb-8">
                  <h3 className="text-xl font-bold text-white mb-4 flex items-center gap-2">
                    <span className="text-red-400">🔴 Shadow APIs (숨겨진 API)</span>
                    <span className="text-red-300">({result.shadow_apis.length}개)</span>
                  </h3>
                  <div className="space-y-2 max-h-96 overflow-y-auto">
                    {result.shadow_apis.map((endpoint: any, index: number) => {
                      const isExpanded = expandedEndpoints.has(`shadow-${index}`);
                      return (
                        <div key={index} className="bg-red-500/20 border border-red-500/50 rounded-lg overflow-hidden">
                          <div
                            className="p-4 flex items-center gap-4 cursor-pointer hover:bg-red-500/30 transition"
                            onClick={() => toggleEndpoint(`shadow-${index}` as any)}
                          >
                            {isExpanded ?
                              <ChevronDown className="w-5 h-5 text-red-300" /> :
                              <ChevronRight className="w-5 h-5 text-red-300" />
                            }
                            <span className={`px-3 py-1 rounded font-semibold text-sm ${
                              endpoint.method === 'GET' ? 'bg-blue-500' :
                              endpoint.method === 'POST' ? 'bg-green-500' :
                              endpoint.method === 'DELETE' ? 'bg-red-500' :
                              'bg-gray-500'
                            } text-white`}>
                              {endpoint.method}
                            </span>
                            <code className="flex-1 text-red-200 font-semibold">{endpoint.url}</code>
                            <span className="px-2 py-1 bg-red-600 text-white text-xs rounded">SHADOW</span>
                          </div>

                          {isExpanded && (
                            <div className="px-4 pb-4 space-y-3 bg-red-900/20">
                              {/* 보안 경고 */}
                              <div className="flex items-start gap-2 p-3 bg-red-600/30 rounded-lg">
                                <AlertTriangle className="w-5 h-5 text-red-300 mt-0.5" />
                                <div className="flex-1">
                                  <p className="text-red-200 font-semibold text-sm">⚠️ Shadow API - 보안 위험</p>
                                  <p className="text-red-300 text-xs mt-1">
                                    이 엔드포인트는 문서화되지 않은 내부 API입니다.
                                    인증 없이 접근 가능하거나 민감한 데이터를 노출할 수 있습니다.
                                  </p>
                                </div>
                              </div>

                              {/* 파라미터 */}
                              {endpoint.parameters && Object.keys(endpoint.parameters).length > 0 && (
                                <div>
                                  <p className="text-red-200 font-semibold text-sm mb-2">📝 파라미터:</p>
                                  <div className="space-y-1">
                                    {Object.entries(endpoint.parameters).map(([key, type]: [string, any]) => (
                                      <div key={key} className="flex items-center gap-2 text-xs">
                                        <code className="px-2 py-1 bg-red-900/40 rounded text-red-200">{key}</code>
                                        <span className="text-red-300">({type})</span>
                                      </div>
                                    ))}
                                  </div>
                                </div>
                              )}

                              {/* 사용 예제 */}
                              <div>
                                <div className="flex items-center justify-between mb-2">
                                  <p className="text-red-200 font-semibold text-sm flex items-center gap-2">
                                    <Terminal className="w-4 h-4" />
                                    cURL 예제:
                                  </p>
                                  <button
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      copyToClipboard(generateCurlCommand(endpoint, targetUrl));
                                    }}
                                    className="flex items-center gap-1 px-2 py-1 bg-red-600 hover:bg-red-700 rounded text-xs text-white"
                                  >
                                    <Copy className="w-3 h-3" />
                                    복사
                                  </button>
                                </div>
                                <pre className="bg-gray-900 p-3 rounded text-xs text-green-400 overflow-x-auto">
                                  {generateCurlCommand(endpoint, targetUrl)}
                                </pre>
                              </div>

                              {/* PoC 코드 */}
                              {endpoint.poc_code && (
                                <div>
                                  <div className="flex items-center justify-between mb-2">
                                    <p className="text-red-200 font-semibold text-sm flex items-center gap-2">
                                      🔥 PoC 코드 (Python):
                                    </p>
                                    <button
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        copyToClipboard(endpoint.poc_code);
                                      }}
                                      className="flex items-center gap-1 px-2 py-1 bg-red-600 hover:bg-red-700 rounded text-xs text-white"
                                    >
                                      <Copy className="w-3 h-3" />
                                      복사
                                    </button>
                                  </div>
                                  <pre className="bg-gray-900 p-3 rounded text-xs text-blue-400 overflow-x-auto">
                                    {endpoint.poc_code}
                                  </pre>
                                </div>
                              )}
                            </div>
                          )}
                        </div>
                      );
                    })}
                  </div>
                </div>
              )}

              {/* Public APIs */}
              {result.public_apis && result.public_apis.length > 0 && (
                <div className="mb-8">
                  <h3 className="text-xl font-bold text-white mb-4 flex items-center gap-2">
                    <span className="text-green-400">🟢 Public APIs (일반 API)</span>
                    <span className="text-green-300">({result.public_apis.length}개)</span>
                  </h3>
                  <div className="space-y-2 max-h-96 overflow-y-auto">
                    {result.public_apis.map((endpoint: any, index: number) => {
                      const isExpanded = expandedEndpoints.has(`public-${index}`);
                      return (
                        <div key={index} className="bg-white/10 rounded-lg overflow-hidden">
                          <div
                            className="p-4 flex items-center gap-4 cursor-pointer hover:bg-white/20 transition"
                            onClick={() => toggleEndpoint(`public-${index}` as any)}
                          >
                            {isExpanded ?
                              <ChevronDown className="w-5 h-5 text-gray-300" /> :
                              <ChevronRight className="w-5 h-5 text-gray-300" />
                            }
                            <span className={`px-3 py-1 rounded font-semibold text-sm ${
                              endpoint.method === 'GET' ? 'bg-blue-500' :
                              endpoint.method === 'POST' ? 'bg-green-500' :
                              endpoint.method === 'DELETE' ? 'bg-red-500' :
                              'bg-gray-500'
                            } text-white`}>
                              {endpoint.method}
                            </span>
                            <code className="flex-1 text-gray-200">{endpoint.url}</code>
                          </div>

                          {isExpanded && (
                            <div className="px-4 pb-4 space-y-3 bg-black/20">
                              {/* 파라미터 */}
                              {endpoint.parameters && Object.keys(endpoint.parameters).length > 0 && (
                                <div>
                                  <p className="text-white font-semibold text-sm mb-2">📝 파라미터:</p>
                                  <div className="space-y-1">
                                    {Object.entries(endpoint.parameters).map(([key, type]: [string, any]) => (
                                      <div key={key} className="flex items-center gap-2 text-xs">
                                        <code className="px-2 py-1 bg-gray-800 rounded text-green-400">{key}</code>
                                        <span className="text-gray-400">({type})</span>
                                      </div>
                                    ))}
                                  </div>
                                </div>
                              )}

                              {/* 사용 예제 */}
                              <div>
                                <div className="flex items-center justify-between mb-2">
                                  <p className="text-white font-semibold text-sm flex items-center gap-2">
                                    <Terminal className="w-4 h-4" />
                                    cURL 예제:
                                  </p>
                                  <button
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      copyToClipboard(generateCurlCommand(endpoint, targetUrl));
                                    }}
                                    className="flex items-center gap-1 px-2 py-1 bg-blue-600 hover:bg-blue-700 rounded text-xs text-white"
                                  >
                                    <Copy className="w-3 h-3" />
                                    복사
                                  </button>
                                </div>
                                <pre className="bg-gray-900 p-3 rounded text-xs text-green-400 overflow-x-auto">
                                  {generateCurlCommand(endpoint, targetUrl)}
                                </pre>
                              </div>

                              {/* PoC 코드 */}
                              {endpoint.poc_code && (
                                <div>
                                  <div className="flex items-center justify-between mb-2">
                                    <p className="text-white font-semibold text-sm flex items-center gap-2">
                                      🔥 PoC 코드 (Python):
                                    </p>
                                    <button
                                      onClick={(e) => {
                                        e.stopPropagation();
                                        copyToClipboard(endpoint.poc_code);
                                      }}
                                      className="flex items-center gap-1 px-2 py-1 bg-blue-600 hover:bg-blue-700 rounded text-xs text-white"
                                    >
                                      <Copy className="w-3 h-3" />
                                      복사
                                    </button>
                                  </div>
                                  <pre className="bg-gray-900 p-3 rounded text-xs text-blue-400 overflow-x-auto">
                                    {endpoint.poc_code}
                                  </pre>
                                </div>
                              )}

                              {/* AI 설명 (있는 경우) */}
                              {endpoint.response_example && (
                                <div>
                                  <p className="text-white font-semibold text-sm mb-2">💡 설명:</p>
                                  <p className="text-gray-300 text-xs">{endpoint.response_example}</p>
                                </div>
                              )}
                            </div>
                          )}
                        </div>
                      );
                    })}
                  </div>
                </div>
              )}

              {/* Vulnerabilities */}
              <div>
                <h3 className="text-xl font-bold text-white mb-4">
                  취약점 ({result.vulnerabilities?.length || 0})
                </h3>
                <div className="space-y-4 max-h-96 overflow-y-auto">
                  {result.vulnerabilities?.slice(0, 10).map((vuln: any, index: number) => {
                    const isVulnExpanded = expandedEndpoints.has(`vuln-${index}`);
                    return (
                      <div
                        key={index}
                        className={`rounded-lg border-l-4 overflow-hidden ${
                          vuln.level === 'critical' ? 'bg-red-500/20 border-red-500' :
                          vuln.level === 'high' ? 'bg-orange-500/20 border-orange-500' :
                          vuln.level === 'medium' ? 'bg-yellow-500/20 border-yellow-500' :
                          'bg-blue-500/20 border-blue-500'
                        }`}
                      >
                        <div
                          className="p-4 cursor-pointer hover:bg-black/20 transition"
                          onClick={() => toggleEndpoint(`vuln-${index}` as any)}
                        >
                          <div className="flex items-start justify-between mb-2">
                            <div className="flex items-center gap-2">
                              {isVulnExpanded ?
                                <ChevronDown className="w-5 h-5 text-white" /> :
                                <ChevronRight className="w-5 h-5 text-white" />
                              }
                              <h4 className="font-bold text-white">{vuln.type}</h4>
                            </div>
                            <span className={`px-3 py-1 rounded-full text-xs font-semibold ${
                              vuln.level === 'critical' ? 'bg-red-500' :
                              vuln.level === 'high' ? 'bg-orange-500' :
                              vuln.level === 'medium' ? 'bg-yellow-500' :
                              'bg-blue-500'
                            } text-white uppercase`}>
                              {vuln.level}
                            </span>
                          </div>
                          <p className="text-gray-200 text-sm mb-2">{vuln.description}</p>
                          <code className="text-gray-300 text-xs block mb-2">
                            {vuln.method} {vuln.endpoint}
                          </code>
                          <p className="text-gray-400 text-sm">
                            <strong>권장사항:</strong> {vuln.recommendation}
                          </p>
                        </div>

                        {/* PoC 코드 (확장 시 표시) */}
                        {isVulnExpanded && vuln.poc_code && (
                          <div className="px-4 pb-4 bg-black/30">
                            <div className="flex items-center justify-between mb-2">
                              <p className="text-white font-semibold text-sm flex items-center gap-2">
                                🔥 PoC 코드 (Python):
                              </p>
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  copyToClipboard(vuln.poc_code);
                                }}
                                className={`flex items-center gap-1 px-2 py-1 rounded text-xs text-white ${
                                  vuln.level === 'critical' ? 'bg-red-600 hover:bg-red-700' :
                                  vuln.level === 'high' ? 'bg-orange-600 hover:bg-orange-700' :
                                  vuln.level === 'medium' ? 'bg-yellow-600 hover:bg-yellow-700' :
                                  'bg-blue-600 hover:bg-blue-700'
                                }`}
                              >
                                <Copy className="w-3 h-3" />
                                복사
                              </button>
                            </div>
                            <pre className="bg-gray-900 p-3 rounded text-xs text-blue-400 overflow-x-auto">
                              {vuln.poc_code}
                            </pre>
                            <div className="mt-2 p-2 bg-red-900/30 rounded text-xs text-red-200">
                              ⚠️ 이 코드는 방어적 보안 테스트 목적으로만 사용하세요. 무단 접근이나 악의적 사용은 법적 처벌을 받을 수 있습니다.
                            </div>
                          </div>
                        )}
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
